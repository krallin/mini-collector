// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	PublishRequest
	PublishResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishRequest struct {
	UnixTime      uint64 `protobuf:"varint,1,opt,name=unix_time,json=unixTime" json:"unix_time,omitempty"`
	MilliCpuUsage uint64 `protobuf:"varint,2,opt,name=milli_cpu_usage,json=milliCpuUsage" json:"milli_cpu_usage,omitempty"`
	MemoryTotalMb uint64 `protobuf:"varint,3,opt,name=memory_total_mb,json=memoryTotalMb" json:"memory_total_mb,omitempty"`
	MemoryRssMb   uint64 `protobuf:"varint,4,opt,name=memory_rss_mb,json=memoryRssMb" json:"memory_rss_mb,omitempty"`
	MemoryLimitMb uint64 `protobuf:"varint,5,opt,name=memory_limit_mb,json=memoryLimitMb" json:"memory_limit_mb,omitempty"`
	Running       bool   `protobuf:"varint,6,opt,name=running" json:"running,omitempty"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishRequest) GetUnixTime() uint64 {
	if m != nil {
		return m.UnixTime
	}
	return 0
}

func (m *PublishRequest) GetMilliCpuUsage() uint64 {
	if m != nil {
		return m.MilliCpuUsage
	}
	return 0
}

func (m *PublishRequest) GetMemoryTotalMb() uint64 {
	if m != nil {
		return m.MemoryTotalMb
	}
	return 0
}

func (m *PublishRequest) GetMemoryRssMb() uint64 {
	if m != nil {
		return m.MemoryRssMb
	}
	return 0
}

func (m *PublishRequest) GetMemoryLimitMb() uint64 {
	if m != nil {
		return m.MemoryLimitMb
	}
	return 0
}

func (m *PublishRequest) GetRunning() bool {
	if m != nil {
		return m.Running
	}
	return false
}

type PublishResponse struct {
}

func (m *PublishResponse) Reset()                    { *m = PublishResponse{} }
func (m *PublishResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()               {}
func (*PublishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*PublishRequest)(nil), "PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "PublishResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Aggregator service

type AggregatorClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type aggregatorClient struct {
	cc *grpc.ClientConn
}

func NewAggregatorClient(cc *grpc.ClientConn) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := grpc.Invoke(ctx, "/Aggregator/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Aggregator service

type AggregatorServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
}

func RegisterAggregatorServer(s *grpc.Server, srv AggregatorServer) {
	s.RegisterService(&_Aggregator_serviceDesc, srv)
}

func _Aggregator_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AggregatorServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Aggregator/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AggregatorServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Aggregator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Aggregator_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0xbd, 0x4a, 0x04, 0x31,
	0x10, 0xc0, 0x71, 0x57, 0xcf, 0xfb, 0x18, 0xd1, 0xd3, 0x54, 0x41, 0x9b, 0x63, 0x0b, 0xb9, 0x6a,
	0x0b, 0x6d, 0x6d, 0xc4, 0xd6, 0x05, 0x59, 0xce, 0x3a, 0x6c, 0x24, 0xc4, 0x81, 0x7c, 0x99, 0x49,
	0x40, 0x9f, 0xd7, 0x17, 0x91, 0xc4, 0x55, 0x4e, 0xcb, 0xfc, 0xf8, 0x67, 0x60, 0x06, 0x56, 0x63,
	0xc0, 0x2e, 0x44, 0x9f, 0x7c, 0xfb, 0xd9, 0xc0, 0xd9, 0x53, 0x96, 0x06, 0xe9, 0x75, 0x50, 0x6f,
	0x59, 0x51, 0x62, 0x57, 0xb0, 0xca, 0x0e, 0xdf, 0x45, 0x42, 0xab, 0x78, 0xb3, 0x69, 0xb6, 0xb3,
	0x61, 0x59, 0x60, 0x87, 0x56, 0xb1, 0x6b, 0x58, 0x5b, 0x34, 0x06, 0xc5, 0x4b, 0xc8, 0x22, 0xd3,
	0xa8, 0x15, 0x3f, 0xac, 0xc9, 0x69, 0xe5, 0x87, 0x90, 0x9f, 0x0b, 0xd6, 0x4e, 0x59, 0x1f, 0x3f,
	0x44, 0xf2, 0x69, 0x34, 0xc2, 0x4a, 0x7e, 0x34, 0x75, 0x95, 0x77, 0x45, 0x7b, 0xc9, 0x5a, 0x98,
	0x40, 0x44, 0xa2, 0x52, 0xcd, 0x6a, 0x75, 0xf2, 0x8d, 0x03, 0x51, 0x2f, 0xf7, 0x66, 0x19, 0xb4,
	0x98, 0x4a, 0x75, 0xbc, 0x3f, 0xeb, 0xb1, 0x68, 0x2f, 0x19, 0x87, 0x45, 0xcc, 0xce, 0xa1, 0xd3,
	0x7c, 0xbe, 0x69, 0xb6, 0xcb, 0xe1, 0xe7, 0xd9, 0x5e, 0xc0, 0xfa, 0x77, 0x49, 0x0a, 0xde, 0x91,
	0xba, 0xb9, 0x03, 0xb8, 0xd7, 0x3a, 0x2a, 0x3d, 0x26, 0x1f, 0x59, 0x07, 0x8b, 0x29, 0x60, 0xeb,
	0xee, 0xef, 0x3d, 0x2e, 0xcf, 0xbb, 0x7f, 0x7f, 0xdb, 0x03, 0x39, 0xaf, 0xd7, 0xbb, 0xfd, 0x0a,
	0x00, 0x00, 0xff, 0xff, 0xab, 0xbd, 0x46, 0x18, 0x4a, 0x01, 0x00, 0x00,
}
