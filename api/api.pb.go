// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api.proto

It has these top-level messages:
	PublishRequest
	PublishResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublishRequest struct {
	TimeNs   int64   `protobuf:"varint,1,opt,name=timeNs" json:"timeNs,omitempty"`
	CpuUsage float32 `protobuf:"fixed32,2,opt,name=cpuUsage" json:"cpuUsage,omitempty"`
}

func (m *PublishRequest) Reset()                    { *m = PublishRequest{} }
func (m *PublishRequest) String() string            { return proto.CompactTextString(m) }
func (*PublishRequest) ProtoMessage()               {}
func (*PublishRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PublishRequest) GetTimeNs() int64 {
	if m != nil {
		return m.TimeNs
	}
	return 0
}

func (m *PublishRequest) GetCpuUsage() float32 {
	if m != nil {
		return m.CpuUsage
	}
	return 0
}

type PublishResponse struct {
}

func (m *PublishResponse) Reset()                    { *m = PublishResponse{} }
func (m *PublishResponse) String() string            { return proto.CompactTextString(m) }
func (*PublishResponse) ProtoMessage()               {}
func (*PublishResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*PublishRequest)(nil), "PublishRequest")
	proto.RegisterType((*PublishResponse)(nil), "PublishResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Aggregator service

type AggregatorClient interface {
	Publish(ctx context.Context, opts ...grpc.CallOption) (Aggregator_PublishClient, error)
}

type aggregatorClient struct {
	cc *grpc.ClientConn
}

func NewAggregatorClient(cc *grpc.ClientConn) AggregatorClient {
	return &aggregatorClient{cc}
}

func (c *aggregatorClient) Publish(ctx context.Context, opts ...grpc.CallOption) (Aggregator_PublishClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Aggregator_serviceDesc.Streams[0], c.cc, "/Aggregator/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &aggregatorPublishClient{stream}
	return x, nil
}

type Aggregator_PublishClient interface {
	Send(*PublishRequest) error
	CloseAndRecv() (*PublishResponse, error)
	grpc.ClientStream
}

type aggregatorPublishClient struct {
	grpc.ClientStream
}

func (x *aggregatorPublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *aggregatorPublishClient) CloseAndRecv() (*PublishResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Aggregator service

type AggregatorServer interface {
	Publish(Aggregator_PublishServer) error
}

func RegisterAggregatorServer(s *grpc.Server, srv AggregatorServer) {
	s.RegisterService(&_Aggregator_serviceDesc, srv)
}

func _Aggregator_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AggregatorServer).Publish(&aggregatorPublishServer{stream})
}

type Aggregator_PublishServer interface {
	SendAndClose(*PublishResponse) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type aggregatorPublishServer struct {
	grpc.ServerStream
}

func (x *aggregatorPublishServer) SendAndClose(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *aggregatorPublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Aggregator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Aggregator",
	HandlerType: (*AggregatorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _Aggregator_Publish_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 144 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x72, 0xe1, 0xe2, 0x0b, 0x28, 0x4d, 0xca, 0xc9, 0x2c, 0xce,
	0x08, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0x2b, 0xc9, 0xcc, 0x4d, 0xf5,
	0x2b, 0x96, 0x60, 0x54, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0xf2, 0x84, 0xa4, 0xb8, 0x38, 0x92, 0x0b,
	0x4a, 0x43, 0x8b, 0x13, 0xd3, 0x53, 0x25, 0x98, 0x14, 0x18, 0x35, 0x98, 0x82, 0xe0, 0x7c, 0x25,
	0x41, 0x2e, 0x7e, 0xb8, 0x29, 0xc5, 0x05, 0xf9, 0x79, 0xc5, 0xa9, 0x46, 0x76, 0x5c, 0x5c, 0x8e,
	0xe9, 0xe9, 0x45, 0xa9, 0xe9, 0x89, 0x25, 0xf9, 0x45, 0x42, 0x06, 0x5c, 0xec, 0x50, 0x05, 0x42,
	0xfc, 0x7a, 0xa8, 0x16, 0x4a, 0x09, 0xe8, 0xa1, 0xe9, 0x55, 0x62, 0xd0, 0x60, 0x4c, 0x62, 0x03,
	0xbb, 0xcf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x1b, 0x4e, 0x7a, 0xac, 0x00, 0x00, 0x00,
}
